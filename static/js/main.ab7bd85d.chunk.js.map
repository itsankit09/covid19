{"version":3,"sources":["InfoBox.jsx","LineGraph.jsx","Table.jsx","util.js","Map.jsx","App.js","serviceWorker.js","index.js"],"names":["InfoBox","title","cases","active","total","isRed","props","Card","onClick","className","CardContent","Typography","color","options","legend","display","elements","point","radius","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","data","numeral","value","format","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","LineGraph","casesType","useState","setData","useEffect","a","fetch","then","resp","json","chartData","buildChartData","fetchData","lastDataPoint","date","newDataPoint","x","y","push","length","datasets","borderColor","backgroundColor","Table","countries","map","country","sortData","sort","b","casesTypeColors","hex","rgb","half_op","multiplier","recovered","deaths","prettyPrintStat","stats","Map","center","zoom","TileLayer","url","attribution","Circle","countryInfo","lat","long","fillColor","fillOpacity","Math","sqrt","Popup","style","backgroundImage","flag","showDataOnMap","App","setInputCountry","setCountryInfo","setCountries","mapCountries","setMapCountries","tableData","setTableData","setCasesType","lng","mapCenter","setMapCenter","mapZoom","setMapZoom","response","name","iso2","sortedData","getCountriesData","console","log","onCountryChange","e","countryCode","target","FormControl","Select","variant","onChange","MenuItem","todayCases","todayRecovered","todayDeaths","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.ab7bd85d.chunk.js","sourcesContent":["import React from 'react'\nimport { Card, CardContent, Typography } from '@material-ui/core'\nimport \"./InfoBox.css\";\n\nfunction InfoBox({ title, cases, active, total, isRed, ...props }) {\n    return (\n        <Card onClick={props.onClick} className={`infoBox ${isRed && 'infoBox--red'} ${active && 'infoBox--selected'}`}>\n            <CardContent>\n                {/* Title like Coronavirus cases */}\n                <Typography className=\"infoBox_title\" color=\"textSecondary\">\n                    {title}\n                </Typography>\n                {/* +120 Number of cases */}\n                <h2 className=\"infoBox__cases\">{cases}</h2>\n                {/* 1.2 M in total */}\n                <Typography className=\"infoBox__total\">\n                    {total} Total\n                </Typography>\n            </CardContent>\n        </Card>\n    )\n}\n\nexport default InfoBox\n","import React, { useState, useEffect } from 'react'\nimport { Line} from 'react-chartjs-2'\nimport numeral from \"numeral\";\n\nconst options = {\n    legend: {\n      display: false,\n    },\n    elements: {\n      point: {\n        radius: 0,\n      },\n    },\n    maintainAspectRatio: false,\n    tooltips: {\n      mode: \"index\",\n      intersect: false,\n      callbacks: {\n        label: function (tooltipItem, data) {\n          return numeral(tooltipItem.value).format(\"+0,0\");\n        },\n      },\n    },\n    scales: {\n      xAxes: [\n        {\n          type: \"time\",\n          time: {\n            format: \"MM/DD/YY\",\n            tooltipFormat: \"ll\",\n          },\n        },\n      ],\n      yAxes: [\n        {\n          gridLines: {\n            display: false,\n          },\n          ticks: {\n            // Include a dollar sign in the ticks\n            callback: function (value, index, values) {\n              return numeral(value).format(\"0a\");\n            },\n          },\n        },\n      ],\n    },\n  };\n\n  \nfunction LineGraph({ casesType = \"cases\"}) {\n    const [data, setData] = useState({});\n\n    useEffect(() => {\n\n        const fetchData = async () => {\n            await fetch('https://disease.sh/v3/covid-19/historical/all?lastdays=120')\n            .then((resp) => resp.json())\n            .then((data) => {\n                //console.log(data)\n                const chartData = buildChartData(data, casesType);\n                setData(chartData);\n            });\n        }\n\n        fetchData();\n        \n    }, [casesType])\n\n    const buildChartData = (data, casesType=\"cases\") => {\n        const chartData = [];\n        let lastDataPoint;\n        for(let date in data[casesType]) {\n            if(lastDataPoint){\n                const newDataPoint = {\n                    x:date,\n                    y:data[casesType][date] -  lastDataPoint\n                }\n                chartData.push(newDataPoint)\n            }\n            lastDataPoint = data[casesType][date];\n        };\n        return chartData;\n    }\n    return (\n        <div className=\"app__graph\">\n            \n            {data?.length >0  && <Line\n                options={options} \n                data ={{\n                    datasets:  [{\n                        data: data,\n                        borderColor: \"#CC1034\",\n                        backgroundColor: \"rgba(204, 16, 52, 0.52)\"\n                    }]\n                }}\n            />}\n            \n        </div>\n    )\n}\n\nexport default LineGraph\n","\nimport React from 'react'\nimport './table.css';\nimport numeral from 'numeral'\nfunction Table({countries}) {\n    return (\n        <div className=\"table\">\n            {\n                countries.map(({country, cases}) => (\n                    <tr>\n                        <td>{country}</td>\n                        <td><strong>{numeral(cases).format(\"0,0\")}</strong></td>\n                    </tr>\n                ))\n            }\n        </div>\n    )\n}\n\nexport default Table\n","import { Circle, Popup } from \"react-leaflet\";\nimport React from \"react\";\nimport numeral from \"numeral\";\nimport './Map.css';\n\nexport const sortData = (data) => {\n  const sortedData = [...data];\n  return sortedData.sort((a, b) => (a.cases > b.cases ? -1 : 1));\n};\n\nconst casesTypeColors = {\n  cases: {\n    hex: \"#CC1034\",\n    rgb: \"rgb(204, 16, 52)\",\n    half_op: \"rgba(204, 16, 52, 0.5)\",\n    multiplier: 800,\n  },\n  recovered: {\n    hex: \"#7dd71d\",\n    rgb: \"rgb(125, 215, 29)\",\n    half_op: \"rgba(125, 215, 29, 0.5)\",\n    multiplier: 1200,\n  },\n  deaths: {\n    hex: \"#fb4443\",\n    rgb: \"rgb(251, 68, 67)\",\n    half_op: \"rgba(251, 68, 67, 0.5)\",\n    multiplier: 2000,\n  },\n};\n\n// Draw circles on map with tooltips\nexport const showDataOnMap = (data, casesType = \"cases\") =>\n  data.map((country) => (\n    <Circle\n      center={[country.countryInfo.lat, country.countryInfo.long]}\n      color={casesTypeColors[casesType].hex}\n      fillColor={casesTypeColors[casesType].hex}\n      fillOpacity={0.4}\n      radius={\n        Math.sqrt(country[casesType]) * casesTypeColors[casesType].multiplier\n      }\n    >\n      <Popup>\n        <div>\n          <div\n            className=\"info-flag\"\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\n          ></div>\n          <div className=\"info-name\">{country.country}</div>\n          <div className=\"info-confirmed\">\n            Cases: {numeral(country.cases).format(\"0,0\")}\n          </div>\n          <div className=\"info-recovered\">\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\n          </div>\n          <div className=\"info-deaths\">\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\n          </div>\n        </div>\n      </Popup>\n    </Circle>\n  ));\n\nexport const prettyPrintStat = (stats) => stats? `+${numeral(stats).format(\"0.0a\")}`:\"+0\";\n","import React from 'react'\nimport { Map as LeafletMap, TileLayer} from \"react-leaflet\";\nimport './Map.css'\nimport { showDataOnMap } from './util'\nfunction Map({countries, casesType, center, zoom}) {\n    return (\n        <div className=\"map\">\n      <LeafletMap center={center} zoom={zoom}>\n        <TileLayer\n          url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n          attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\n        />\n        {showDataOnMap(countries, casesType)}\n      </LeafletMap>\n    </div>\n    )\n}\n\nexport default Map;\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport {\n  MenuItem,\n  FormControl,\n  Select,\n  Card,\n  CardContent,\n} from \"@material-ui/core\";\nimport InfoBox from \"./InfoBox\";\nimport LineGraph from \"./LineGraph\";\nimport Table from \"./Table\";\nimport { sortData, prettyPrintStat } from \"./util\";\nimport numeral from \"numeral\";\nimport Map from \"./Map\";\nimport \"leaflet/dist/leaflet.css\";\n\nconst App = () => {\n  const [country, setInputCountry] = useState(\"worldwide\");\n  const [countryInfo, setCountryInfo] = useState({});\n  const [countries, setCountries] = useState([]);\n  const [mapCountries, setMapCountries] = useState([]);\n  const [tableData, setTableData] = useState([]);\n  const [casesType, setCasesType] = useState(\"cases\");\n  const [mapCenter, setMapCenter] = useState({ lat: 34.80746, lng: -40.4796 });\n  const [mapZoom, setMapZoom] = useState(3);\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\")\n      .then((response) => response.json())\n      .then((data) => {\n        setCountryInfo(data);\n      });\n  }, []);\n\n  useEffect(() => {\n    const getCountriesData = async () => {\n      fetch(\"https://disease.sh/v3/covid-19/countries\")\n        .then((response) => response.json())\n        .then((data) => {\n          const countries = data.map((country) => ({\n            name: country.country,\n            value: country.countryInfo.iso2,\n          }));\n          let sortedData = sortData(data);\n          setCountries(countries);\n          setMapCountries(data);\n          setTableData(sortedData);\n        });\n    };\n\n    getCountriesData();\n  }, []);\n\n  console.log(casesType);\n\n  const onCountryChange = async (e) => {\n    const countryCode = e.target.value;\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setInputCountry(countryCode);\n        setCountryInfo(data);\n        setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setMapZoom(4);\n      });\n  };\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        <div className=\"app__header\">\n          <h1>COVID-19 Tracker</h1>\n          <FormControl className=\"app__dropdown\">\n            <Select\n              variant=\"outlined\"\n              value={country}\n              onChange={onCountryChange}\n            >\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n            </Select>\n          </FormControl>\n        </div>\n        <div className=\"app__stats\">\n          <InfoBox\n            onClick={(e) => setCasesType(\"cases\")}\n            title=\"Coronavirus Cases\"\n            isRed\n            active={casesType === \"cases\"}\n            cases={prettyPrintStat(countryInfo.todayCases)}\n            total={numeral(countryInfo.cases).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"recovered\")}\n            title=\"Recovered\"\n            active={casesType === \"recovered\"}\n            cases={prettyPrintStat(countryInfo.todayRecovered)}\n            total={numeral(countryInfo.recovered).format(\"0.0a\")}\n          />\n          <InfoBox\n            onClick={(e) => setCasesType(\"deaths\")}\n            title=\"Deaths\"\n            isRed\n            active={casesType === \"deaths\"}\n            cases={prettyPrintStat(countryInfo.todayDeaths)}\n            total={numeral(countryInfo.deaths).format(\"0.0a\")}\n          />\n        </div>\n        <Map\n          countries={mapCountries}\n          casesType={casesType}\n          center={mapCenter}\n          zoom={mapZoom}\n        />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <div className=\"app__information\">\n            <h3>Live Cases by Country</h3>\n            <Table countries={tableData} />\n            <h3>Worldwide new {casesType}</h3>\n            <LineGraph casesType={casesType} />\n          </div>\n        </CardContent>\n      </Card>\n    </div>\n  );\n};\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}